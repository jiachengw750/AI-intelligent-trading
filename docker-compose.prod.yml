version: '3.8'

# AI智能交易大脑 - 生产环境Docker Compose配置

services:
  # PostgreSQL数据库 - 生产配置
  postgres:
    image: postgres:15-alpine
    container_name: ai_trading_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./deployment/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./deployment/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis集群 - 生产配置
  redis-master:
    image: redis:7-alpine
    container_name: ai_trading_redis_master
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_master_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-slave:
    image: redis:7-alpine
    container_name: ai_trading_redis_slave
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --slaveof redis-master 6379 --masterauth ${REDIS_PASSWORD}
    volumes:
      - redis_slave_data:/data
    depends_on:
      - redis-master
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # AI智能交易大脑 - API服务集群
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    image: ai_trading_api:latest
    environment:
      SERVICE_TYPE: api
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_WORKERS: 8
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 工作进程集群
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    image: ai_trading_worker:latest
    environment:
      SERVICE_TYPE: worker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '3.0'
          memory: 3G
        reservations:
          cpus: '1.5'
          memory: 1.5G

  # 数据收集器集群
  collector:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    image: ai_trading_collector:latest
    environment:
      SERVICE_TYPE: collector
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # AI分析器集群
  analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    image: ai_trading_analyzer:latest
    environment:
      SERVICE_TYPE: analyzer
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # 监控服务
  monitoring:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: monitoring
    image: ai_trading_monitoring:latest
    environment:
      SERVICE_TYPE: monitoring
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      LOG_LEVEL: INFO
      ENVIRONMENT: production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./monitoring:/app/monitoring
    ports:
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_trading_prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: ai_trading_grafana_prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: ai_trading_nginx_prod
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d
      - ./deployment/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - grafana
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # 日志收集 - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ai_trading_elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      xpack.security.enabled: "false"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ai_trading_prod_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: ai_trading_logstash
    volumes:
      - ./deployment/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/var/log/app
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - ai_trading_prod_network
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ai_trading_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - ai_trading_prod_network
    restart: always

  # 备份服务
  backup:
    image: alpine:latest
    container_name: ai_trading_backup
    volumes:
      - postgres_prod_data:/backup/postgres
      - redis_master_data:/backup/redis
      - ./data:/backup/data
      - ./logs:/backup/logs
      - ./deployment/scripts/backup.sh:/backup.sh
    command: ["sh", "-c", "chmod +x /backup.sh && crond -f"]
    depends_on:
      - postgres
      - redis-master
    networks:
      - ai_trading_prod_network
    restart: always

# 生产网络
networks:
  ai_trading_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

# 生产数据卷
volumes:
  postgres_prod_data:
    driver: local
  redis_master_data:
    driver: local
  redis_slave_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  elasticsearch_data:
    driver: local