version: '3.8'

# AI智能交易大脑 - Docker Compose配置

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ai_trading_postgres
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-trading_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai_trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ai_trading_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai_trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI智能交易大脑 - API服务
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: ai_trading_api
    environment:
      SERVICE_TYPE: api
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: trading_user
      DB_PASSWORD: ${DB_PASSWORD:-trading_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_WORKERS: 4
      LOG_LEVEL: INFO
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # AI智能交易大脑 - 工作进程
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: ai_trading_worker
    environment:
      SERVICE_TYPE: worker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: trading_user
      DB_PASSWORD: ${DB_PASSWORD:-trading_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      LOG_LEVEL: INFO
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_trading_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # 数据收集器
  collector:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: ai_trading_collector
    environment:
      SERVICE_TYPE: collector
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: trading_user
      DB_PASSWORD: ${DB_PASSWORD:-trading_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      LOG_LEVEL: INFO
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_trading_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # AI分析器
  analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: ai_trading_analyzer
    environment:
      SERVICE_TYPE: analyzer
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: trading_user
      DB_PASSWORD: ${DB_PASSWORD:-trading_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      LOG_LEVEL: INFO
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_trading_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M

  # 监控服务
  monitoring:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: monitoring
    container_name: ai_trading_monitoring
    environment:
      SERVICE_TYPE: monitoring
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: trading_user
      DB_PASSWORD: ${DB_PASSWORD:-trading_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./monitoring:/app/monitoring
    ports:
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_trading_network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_trading_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - ai_trading_network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: ai_trading_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - ai_trading_network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ai_trading_nginx
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - grafana
    networks:
      - ai_trading_network
    restart: unless-stopped

  # 日志收集
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ai_trading_fluentd
    volumes:
      - ./deployment/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - ./logs:/var/log/app
    ports:
      - "24224:24224"
    networks:
      - ai_trading_network
    restart: unless-stopped

# 网络配置
networks:
  ai_trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local